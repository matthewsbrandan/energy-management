<div
  class="relative z-10"
  v-bind:class="{ hidden: !is_expanded }"
  aria-labelledby="modal-title"
  role="dialog"
  aria-modal="true"
  id="modal-device-details"
>
  <div class="fixed inset-0 bg-black bg-opacity-75 transition-opacity" aria-hidden="true"></div>
  <div class="fixed inset-0 z-10 w-screen overflow-y-auto">
    <div class="flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0">
      <div class="relative transform overflow-hidden rounded-lg bg-gray-800 text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg">
        <div class="bg-gray-800 px-4 pb-4 pt-5 sm:p-6 sm:pb-4">
          <div v-if="device">
            <div class="mt-3 text-center sm:mt-0 sm:text-left">
              <h3 class="flex gap-2 text-base font-semibold leading-6 text-gray-400" id="modal-title">
                <a
                  href="#"
                  v-bind:aria-label="device.status"
                  v-bind:title="device.status"
                  v-bind:class="{
                    'relative z-10 rounded-full block px-1 min-w-0.5 my-0.5 text-xs font-medium': true,
                    'bg-emerald-500': device.status === 'ativo',
                    'bg-amber-500': device.status === 'pareado',
                    'bg-red-600': device.status === 'desconectado'
                  }"
                ></a>
                {{ device.title ?? `Dispositivo: ${device.id}` }}
              </h3>
            </div>
            <div>
              <div class="mt-14 text-sm" v-if="device.device_type?.data?.toggler">
                <div class="grid grid-cols-8 w-full">
                  <div
                    class="border-gray-500 border-l h-2 min-w-0.5 last:border-r"
                    v-for="h of hours"
                  >
                    <span style="
                      transform: translateY(-100%) translateX(-50%);
                      display: inline-block;
                    ">{{ Array.isArray(h) ? h[0] : h }}</span>
                    <span  style="
                      text-align: right;
                      margin-left: auto;
                      transform: translateY(-100%) translateX(50%);
                      display: inline-block;
                    " v-if="Array.isArray(h)">
                      {{ h[1] }}
                    </span>
                  </div>
                </div>
                <div class="w-full mt-3 flex rounded-md overflow-hidden">
                  <div 
                    v-for="[i, state] of state_by_percent_hour.entries()"
                    v-bind:class="{ 'h-2 rounded-r-md': true, 'bg-blue-600': state.type === 'ativo', 'bg-gray-200/75': state.type === 'inativo', 'bg-gray-700/80': !state.type }" v-bind:style="{ width: `calc(${state.percent}% + 2px)`, marginLeft: '-2px', zIndex: state_by_percent_hour.length - i }"
                  ></div>
                </div>
                <div class="text-xs flex flex-col gap-0.5 mt-4">
                  <strong>Legenda:</strong>
                  <div class="flex items-center gap-2">
                    <span class="bg-blue-600 min-w-2 h-2 block rounded-full"></span> Ativo
                  </div>
                  <div class="flex items-center gap-2">
                    <span class="bg-gray-200/75 min-w-2 h-2 block rounded-full"></span> Inativo
                  </div>
                  <div class="flex items-center gap-2">
                    <span class="bg-gray-700/80 min-w-2 h-2 block rounded-full"></span> Desconectado
                  </div>
                </div>
              </div>
              <div class="mt-4" v-if="device.device_type?.data?.monitoring">
                <div style="width: 470px; height: 240px;">
                  <canvas id="device-monitoring-chart"></canvas>
                </div>
                <em class="text-gray-400 text-xs text-right block">
                  - Últimas 8 horas
                </em>
              </div>
              <div v-if="!!device?.device_type?.data?.toggler">
                <button
                  type="button"
                  v-on:click="() => to_schedule = !to_schedule"
                  class="mt-8 flex-1 flex gap-2 items-center justify-center w-full text-center rounded-full px-3 py-1.5 text-xs font-semibold shadow-sm focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-gray-200"
                  v-bind:class="{ 'text-gray-400 hover:bg-gray-50/5': to_schedule, 'bg-gray-50/90 text-gray-600 hover:bg-gray-300 ': !to_schedule}"
                >
                  Agendamentos
                  <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" style="fill: currentColor;"><path d="M12 4c-4.879 0-9 4.121-9 9s4.121 9 9 9 9-4.121 9-9-4.121-9-9-9zm4 10h-3v3h-2v-3H8v-2h3V9h2v3h3v2zm1.284-10.293 1.412-1.416 3.01 3-1.413 1.417zM5.282 2.294 6.7 3.706l-2.99 3-1.417-1.413z"></path></svg>
                </button>
                <div v-if="to_schedule">
                  <div class="my-4 flex gap-2">
                    <button
                      v-if="schedule.current.state"
                      type="button"
                      v-on:click="() => schedule.current.state = schedule.current.state === 'ativo' ? 'inativo' : 'ativo'"
                      v-bind:class="{ 'flex-1 block w-full text-center rounded-md bg-gray-50/90 px-3 py-0.5 text-xs font-semibold shadow-sm hover:text-white focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2': true, 'text-red-600 hover:bg-red-600 focus-visible:outline-red-600': schedule.current.state === 'ativo', 'text-emerald-600 hover:bg-emerald-600 focus-visible:outline-emerald-600': schedule.current.state !== 'ativo' }"
                    >{{ schedule.current?.state === 'ativo' ? 'Desligar':'Ligar' }}</button>
                    
                    <div class="rounded-lg flex items-center pl-2 gap-2 shadow-sm ring-1 ring-inset ring-gray-500 focus-within:ring-2 focus-within:ring-inset focus-within:ring-amber-600 sm:max-w-md">
                      <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" style="fill: currentColor;"><path d="M12 4c-4.879 0-9 4.121-9 9s4.121 9 9 9 9-4.121 9-9-4.121-9-9-9zm4 10h-3v3h-2v-3H8v-2h3V9h2v3h3v2zm1.284-10.293 1.412-1.416 3.01 3-1.413 1.417zM5.282 2.294 6.7 3.706l-2.99 3-1.417-1.413z"></path></svg>
                      <input
                        type="text"
                        class="w-full block flex-1 border-0 outline-none bg-transparent px-2 py-1 text-gray-400 placeholder:text-gray-600 focus:ring-0 sm:text-sm sm:leading-6"
                        placeholder="Digite a hora..."
                        v-model="schedule.current.time"
                        required
                      />
                    </div>
  
                    <button type="button" v-on:click="() => addSchedule()" class="
                      flex-1 block w-full text-center rounded-md hover:bg-gray-50/5 px-3 py-1.5 
                      text-xs font-semibold text-gray-400 shadow-sm
                      focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2
                      focus-visible:outline-gray-600
                    ">Adicionar</button>
                  </div>

                  <table class="w-full">
                    <thead>
                      <tr class="border-b border-gray-600">
                        <th class="uppercase text-xs p-1">Ação</th>
                        <th class="uppercase text-xs p-1">Horário</th>
                        <th></th>
                      </tr>
                    </thead>
                    <tbody>
                      <tr v-for="[i, item] of schedule.list.entries()" :key="i">
                        <td class="text-sm p-1">{{ item.state === 'ativo' ? 'Ligar':'Desligar' }}</td>
                        <td class="text-sm p-1">{{ item.time }}</td>
                        <td class="text-sm p-1 text-right w-4">
                          <svg xmlns="http://www.w3.org/2000/svg" class="ml-auto" width="18" height="18" viewBox="0 0 24 24" style="fill: currentColor;"><path d="M6 7H5v13a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V7H6zm4 12H8v-9h2v9zm6 0h-2v-9h2v9zm.618-15L15 2H9L7.382 4H3v2h18V4z"></path></svg>
                        </td>
                      </tr>
                    </tbody>
                  </table>
                </div>
              </div>
              <button type="button" v-if="!(!!device?.device_type?.data?.toggler && !!to_schedule)" v-on:click="() => is_expanded = false" class="
                mt-1 flex-1 block w-full text-center rounded-full hover:bg-gray-50/5 px-3 py-1.5 
                text-xs font-semibold text-gray-400 shadow-sm
                focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2
                focus-visible:outline-gray-600
              ">Fechar</button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
<script>
  const vueDeviceDetails = new Vue({
    el: '#modal-device-details',
    data: {
      is_expanded: false,
      device: undefined,
      to_schedule: false,
      schedule: {
        current: { state: 'ativo', time: '' },
        list: [{ state: 'inativo', time: '22:00' }]
      },
      hours: ((hour) => Array.from({ length: 8 }).map((_, i) => {
        const parseHour = (hour) => {
          let h = hour;
          if(h < 0) h+=24;
          return String(h).padStart(2, '0') + 'h'
        }
        if(i === 7) return [parseHour(hour - (8 - i)), parseHour(hour)]
        return parseHour(hour - (8 - i))
      }))(new Date().getHours() + 1),
      state_by_percent_hour: []
    },
    methods: {
      addSchedule: function(){
        this.schedule.list.push({ state: this.schedule.current.state, time: this.schedule.current.time })
        this.schedule.current.time = '';
      }
    }
  })
  
  let chart = undefined;
  

  function callModalDeviceDetails(id){
    const findedDevice = devices.find((device) => device.id === id);

    if(!findedDevice){
      notify({ type: 'warning', text: 'Não foi possível localizar o dispositivo' });
      return;
    }
    
    vueDeviceDetails.device = findedDevice;
    vueDeviceDetails.is_expanded = true;

    if(findedDevice.device_type?.data?.toggler) loadDeviceTogglerDetails(id)
    if(findedDevice.device_type?.data?.monitoring) loadDeviceMonitoringDetails(id)
  }
  async function loadDeviceTogglerDetails(id){
    const res = await getTogglerLastEightHours(id);
    console.log('[load-device-toggler]', res);
    if(!res.result){
      notify({
        type: 'warning',
        text: res.response
      })
      return;
    }
    
    vueDeviceDetails.state_by_percent_hour = res.data;
  }
  async function loadDeviceMonitoringDetails(id){
    const res = await getMonitoringLastEightHours(id)
    console.log('[load-device-monitoring]', res);
    if(!res.result){
      notify({
        type: 'warning',
        text: res.response
      })
      return;
    }

    if(!chart){
      const ctx = document.getElementById('device-monitoring-chart');
      if(ctx) chart = new Chart(ctx, {
        type: 'line',
        data: {
          labels: [],
          datasets: [{
            label: 'Monitoring',
            data: [],
            fill: false,
            borderColor: 'rgb(75, 192, 192)',
            tension: 0.1
          }]
        }
      });
    }

    if(!res.data || !chart) return;

    const values = Object.values(res.data);
    
    const chartData = values.length > 40 ? values.splice(-40) : values;
    
    chart.data.labels = chartData.map(() => '');
    chart.data.datasets[0].data = chartData;

    chart.update()
  }
</script>